I"§4<h2 id="websockets-with-rails">WebSockets with Rails</h2>

<h3 id="what-are-websockets">What are WebSockets?</h3>

<p>WebSocket is a protocol that enables bidirectional communication between the client and the server of a web application over a single long living TCP connection.</p>

<blockquote>
  <p>The WebSocket protocol enables interaction between a web browser (or other client application) and a web server with lower overheads, facilitating real-time data transfer from and to the server.</p>
</blockquote>

<blockquote>
  <p>This is made possible by providing a standardized way for the server to send content to the client without being first requested by the client, and allowing messages to be passed back and forth while keeping the connection open. In this way, a two-way ongoing conversation can take place between the client and the server.</p>
</blockquote>

<blockquote>
  <p>The communications are done over TCP port number 80 (or 443 in the case of TLS-encrypted connections), which is of benefit for those environments which block non-web Internet connections using a firewall. Similar two-way browser-server communications have been achieved in non-standardized ways using stopgap technologies such as Comet.</p>
</blockquote>

<p>Setting up the configuration for ActionCable with Redis, inside of config/cable.yml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">development</span><span class="pi">:</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">redis</span>
  <span class="na">url</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %&gt;</span>
  <span class="na">channel_prefix</span><span class="pi">:</span> <span class="s">rails-chat-tutorial_development</span>

<span class="na">test</span><span class="pi">:</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">async</span>

<span class="na">production</span><span class="pi">:</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">redis</span>
  <span class="na">url</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %&gt;</span>
  <span class="na">channel_prefix</span><span class="pi">:</span> <span class="s">rails-chat-tutorial_production</span>
</code></pre></div></div>

<p>Set cookies when establishing a WebSocket connection, as we donâ€™t have access to the user session.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Warden</span><span class="o">::</span><span class="no">Manager</span><span class="p">.</span><span class="nf">after_set_user</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="p">,</span><span class="n">auth</span><span class="p">,</span><span class="n">opts</span><span class="o">|</span>
  <span class="n">scope</span> <span class="o">=</span> <span class="n">opts</span><span class="p">[</span><span class="ss">:scope</span><span class="p">]</span>
  <span class="n">auth</span><span class="p">.</span><span class="nf">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="s2">"</span><span class="si">#{</span><span class="n">scope</span><span class="si">}</span><span class="s2">.id"</span><span class="p">]</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">id</span>
<span class="k">end</span>

<span class="no">Warden</span><span class="o">::</span><span class="no">Manager</span><span class="p">.</span><span class="nf">before_logout</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="p">,</span> <span class="n">auth</span><span class="p">,</span> <span class="n">opts</span><span class="o">|</span>
  <span class="n">scope</span> <span class="o">=</span> <span class="n">opts</span><span class="p">[</span><span class="ss">:scope</span><span class="p">]</span>
  <span class="n">auth</span><span class="p">.</span><span class="nf">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="s2">"</span><span class="si">#{</span><span class="n">scope</span><span class="si">}</span><span class="s2">.id"</span><span class="p">]</span> <span class="o">=</span> <span class="kp">nil</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Set identifier in main <code class="language-plaintext highlighter-rouge">ApplicationCable::Connection</code> class so that we may find the specific connection later on.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">module</span> <span class="nn">ApplicationCable</span>
  <span class="k">class</span> <span class="nc">Connection</span> <span class="o">&lt;</span> <span class="no">ActionCable</span><span class="o">::</span><span class="no">Connection</span><span class="o">::</span><span class="no">Base</span>
    <span class="n">identified_by</span> <span class="ss">:current_user</span>

    <span class="k">def</span> <span class="nf">connect</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">current_user</span> <span class="o">=</span> <span class="n">find_verified_user</span>
    <span class="k">end</span>

    <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">find_verified_user</span>
      <span class="k">if</span> <span class="n">verified_user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">id: </span><span class="n">cookies</span><span class="p">.</span><span class="nf">signed</span><span class="p">[</span><span class="s1">'user.id'</span><span class="p">])</span>
        <span class="n">verified_user</span>
      <span class="k">else</span>
        <span class="n">reject_unauthorized_connection</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Inside of the find_verified_user method we access the cookie that we previously set in the warden hook.</p>

<p>The initial setup of the RoomChannel.</p>

<blockquote>
  <p>A channel encapsulates a logical unit of work, similar to what a controller does in a regular MVC setup.</p>
</blockquote>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RoomChannel</span> <span class="o">&lt;</span> <span class="no">ApplicationCable</span><span class="o">::</span><span class="no">Channel</span>
  <span class="k">def</span> <span class="nf">subscribed</span>
    <span class="n">room</span> <span class="o">=</span> <span class="no">Room</span><span class="p">.</span><span class="nf">find</span> <span class="n">params</span><span class="p">[</span><span class="ss">:room</span><span class="p">]</span>
    <span class="n">stream_for</span> <span class="n">room</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The subscribed method gets called once a subscription to the channel is established.</p>

<p>Everytime a room message is being created, we need to broadcast to the messageâ€™s room stream.</p>

<pre><code class="language-app/controllers/room_messages_controller.rb```">
```ruby
def create
  @room_message = RoomMessage.create user: current_user,
                                     room: @room,
                                     message: params.dig(:room_message, :message)

  RoomChannel.broadcast_to @room, @room_message
end
</code></pre>

<p>We need to add some data to the room page in order to use them via JavaScript to subscribe to the appropriate stream.</p>

<pre><code class="language-app/views/rooms/show.html.erb```">
```html
&lt;div class="chat" data-channel-subscribe="room" data-room-id="&lt;%= @room.id %&gt;"&gt;
</code></pre>

<p>And finally create a <code class="language-plaintext highlighter-rouge">room_channel</code> handler to subscribe and handle incoming channel data.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-channel-subscribe="room"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">$element</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">),</span>
      <span class="nx">room_id</span> <span class="o">=</span> <span class="nx">$element</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="dl">'</span><span class="s1">room-id</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">messageTemplate</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-role="message-template"]</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">$element</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="na">scrollTop</span><span class="p">:</span> <span class="nx">$element</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="dl">"</span><span class="s2">scrollHeight</span><span class="dl">"</span><span class="p">)},</span> <span class="mi">1000</span><span class="p">)</span>

    <span class="nx">App</span><span class="p">.</span><span class="nx">cable</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span>
      <span class="p">{</span>
        <span class="na">channel</span><span class="p">:</span> <span class="dl">"</span><span class="s2">RoomChannel</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">room</span><span class="p">:</span> <span class="nx">room_id</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">received</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">messageTemplate</span><span class="p">.</span><span class="nx">children</span><span class="p">().</span><span class="nx">clone</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
          <span class="nx">content</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-role="user-avatar"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">src</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">user_avatar_url</span><span class="p">);</span>
          <span class="nx">content</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-role="message-text"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
          <span class="nx">content</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-role="message-date"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">updated_at</span><span class="p">);</span>
          <span class="nx">$element</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
          <span class="nx">$element</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="na">scrollTop</span><span class="p">:</span> <span class="nx">$element</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="dl">"</span><span class="s2">scrollHeight</span><span class="dl">"</span><span class="p">)},</span> <span class="mi">1000</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

</code></pre></div></div>

<p><a href="./">back</a></p>
:ET